// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/domahidizoltan/playground-dapr/balanceservice/ent/generated/balance"
	"github.com/domahidizoltan/playground-dapr/balanceservice/ent/generated/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBalance = "Balance"
)

// BalanceMutation represents an operation that mutates the Balance nodes in the graph.
type BalanceMutation struct {
	config
	op            Op
	typ           string
	id            *string
	balance       *float64
	addbalance    *float64
	pending       *float64
	addpending    *float64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Balance, error)
	predicates    []predicate.Balance
}

var _ ent.Mutation = (*BalanceMutation)(nil)

// balanceOption allows management of the mutation configuration using functional options.
type balanceOption func(*BalanceMutation)

// newBalanceMutation creates new mutation for the Balance entity.
func newBalanceMutation(c config, op Op, opts ...balanceOption) *BalanceMutation {
	m := &BalanceMutation{
		config:        c,
		op:            op,
		typ:           TypeBalance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBalanceID sets the ID field of the mutation.
func withBalanceID(id string) balanceOption {
	return func(m *BalanceMutation) {
		var (
			err   error
			once  sync.Once
			value *Balance
		)
		m.oldValue = func(ctx context.Context) (*Balance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Balance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBalance sets the old Balance of the mutation.
func withBalance(node *Balance) balanceOption {
	return func(m *BalanceMutation) {
		m.oldValue = func(context.Context) (*Balance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BalanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BalanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Balance entities.
func (m *BalanceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BalanceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BalanceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Balance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBalance sets the "balance" field.
func (m *BalanceMutation) SetBalance(f float64) {
	m.balance = &f
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *BalanceMutation) Balance() (r float64, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Balance entity.
// If the Balance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BalanceMutation) OldBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds f to the "balance" field.
func (m *BalanceMutation) AddBalance(f float64) {
	if m.addbalance != nil {
		*m.addbalance += f
	} else {
		m.addbalance = &f
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *BalanceMutation) AddedBalance() (r float64, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *BalanceMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetPending sets the "pending" field.
func (m *BalanceMutation) SetPending(f float64) {
	m.pending = &f
	m.addpending = nil
}

// Pending returns the value of the "pending" field in the mutation.
func (m *BalanceMutation) Pending() (r float64, exists bool) {
	v := m.pending
	if v == nil {
		return
	}
	return *v, true
}

// OldPending returns the old "pending" field's value of the Balance entity.
// If the Balance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BalanceMutation) OldPending(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPending is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPending requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPending: %w", err)
	}
	return oldValue.Pending, nil
}

// AddPending adds f to the "pending" field.
func (m *BalanceMutation) AddPending(f float64) {
	if m.addpending != nil {
		*m.addpending += f
	} else {
		m.addpending = &f
	}
}

// AddedPending returns the value that was added to the "pending" field in this mutation.
func (m *BalanceMutation) AddedPending() (r float64, exists bool) {
	v := m.addpending
	if v == nil {
		return
	}
	return *v, true
}

// ResetPending resets all changes to the "pending" field.
func (m *BalanceMutation) ResetPending() {
	m.pending = nil
	m.addpending = nil
}

// Where appends a list predicates to the BalanceMutation builder.
func (m *BalanceMutation) Where(ps ...predicate.Balance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BalanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BalanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Balance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BalanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BalanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Balance).
func (m *BalanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BalanceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.balance != nil {
		fields = append(fields, balance.FieldBalance)
	}
	if m.pending != nil {
		fields = append(fields, balance.FieldPending)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BalanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case balance.FieldBalance:
		return m.Balance()
	case balance.FieldPending:
		return m.Pending()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BalanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case balance.FieldBalance:
		return m.OldBalance(ctx)
	case balance.FieldPending:
		return m.OldPending(ctx)
	}
	return nil, fmt.Errorf("unknown Balance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BalanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case balance.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case balance.FieldPending:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPending(v)
		return nil
	}
	return fmt.Errorf("unknown Balance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BalanceMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, balance.FieldBalance)
	}
	if m.addpending != nil {
		fields = append(fields, balance.FieldPending)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BalanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case balance.FieldBalance:
		return m.AddedBalance()
	case balance.FieldPending:
		return m.AddedPending()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BalanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case balance.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	case balance.FieldPending:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPending(v)
		return nil
	}
	return fmt.Errorf("unknown Balance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BalanceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BalanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BalanceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Balance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BalanceMutation) ResetField(name string) error {
	switch name {
	case balance.FieldBalance:
		m.ResetBalance()
		return nil
	case balance.FieldPending:
		m.ResetPending()
		return nil
	}
	return fmt.Errorf("unknown Balance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BalanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BalanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BalanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BalanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BalanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BalanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BalanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Balance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BalanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Balance edge %s", name)
}
